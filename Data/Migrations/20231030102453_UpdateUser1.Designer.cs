// <auto-generated />
using System;
using DataLayer.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(MorkContext))]
    [Migration("20231030102453_UpdateUser1")]
    partial class UpdateUser1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Addresses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Addresses = "123 Main St",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(157),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(161),
                            Latitude = 40.712800000000001,
                            Longitude = -74.006
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Addresses = "456 Elm St",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(184),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(184),
                            Latitude = 35.689500000000002,
                            Longitude = 139.6917
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Addresses = "789 Oak St",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(188),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(188),
                            Latitude = 51.507399999999997,
                            Longitude = -0.1278
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Addresses = "101 Maple St",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(191),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(191),
                            Latitude = 52.520000000000003,
                            Longitude = 13.404999999999999
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Addresses = "202 Birch St",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(194),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(194),
                            Latitude = 48.8566,
                            Longitude = 2.3521999999999998
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            Addresses = "303 Cedar St",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(196),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(197),
                            Latitude = 37.774900000000002,
                            Longitude = -122.4194
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            Addresses = "404 Pine St",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(199),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(200),
                            Latitude = 34.052199999999999,
                            Longitude = -118.2437
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            Addresses = "505 Spruce St",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(214),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(214),
                            Latitude = 41.878100000000003,
                            Longitude = -87.629800000000003
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            Addresses = "606 Redwood St",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(217),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(217),
                            Latitude = 51.165700000000001,
                            Longitude = 10.451499999999999
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Addresses = "707 Sequoia St",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(220),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(220),
                            Latitude = 35.682839000000001,
                            Longitude = 139.759455
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Addresses = "808 Cedar St",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(223),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(224),
                            Latitude = 40.712800000000001,
                            Longitude = -74.006
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Addresses = "909 Pine St",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(226),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(227),
                            Latitude = 35.689500000000002,
                            Longitude = 139.6917
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Addresses = "1010 Oak St",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(229),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(230),
                            Latitude = 51.507399999999997,
                            Longitude = -0.1278
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Addresses = "1111 Elm St",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(232),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(232),
                            Latitude = 52.520000000000003,
                            Longitude = 13.404999999999999
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            Addresses = "1212 Birch St",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(234),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(235),
                            Latitude = 48.8566,
                            Longitude = 2.3521999999999998
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Campuses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CampusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Campuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36041dfa-f87d-4889-8e75-b5a6228069bb"),
                            AddressId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CampusName = "Campus 1",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(440),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(441)
                        },
                        new
                        {
                            Id = new Guid("9aacf079-0c17-47ba-97e2-2c987ed31ccb"),
                            AddressId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CampusName = "Campus 2",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(446),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(446)
                        },
                        new
                        {
                            Id = new Guid("41706a7b-f221-4d7b-ba76-d533635a6ba5"),
                            AddressId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CampusName = "Campus 3",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(448),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(449)
                        },
                        new
                        {
                            Id = new Guid("0977aee7-57aa-4705-9133-aae7a6175efa"),
                            AddressId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CampusName = "Campus 4",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(451),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(452)
                        },
                        new
                        {
                            Id = new Guid("e9705cb7-36ca-42c3-bcc2-199094c52cde"),
                            AddressId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CampusName = "Campus 5",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(454),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(454)
                        },
                        new
                        {
                            Id = new Guid("b8df88cb-b8f1-4262-b9eb-e37a73ab10c3"),
                            AddressId = new Guid("66666666-6666-6666-6666-666666666666"),
                            CampusName = "Campus 6",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(456),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(457)
                        },
                        new
                        {
                            Id = new Guid("85c87b65-990b-4306-9dd2-34febb76bd88"),
                            AddressId = new Guid("77777777-7777-7777-7777-777777777777"),
                            CampusName = "Campus 7",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(459),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(459)
                        },
                        new
                        {
                            Id = new Guid("ec90ca30-339c-4220-b994-be8ac9847846"),
                            AddressId = new Guid("88888888-8888-8888-8888-888888888888"),
                            CampusName = "Campus 8",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(462),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(462)
                        },
                        new
                        {
                            Id = new Guid("c27c531e-bff9-4ce0-8eed-093d6155567f"),
                            AddressId = new Guid("99999999-9999-9999-9999-999999999999"),
                            CampusName = "Campus 9",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(467),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(467)
                        },
                        new
                        {
                            Id = new Guid("0af0d8a6-8913-4ae8-9331-7f9d201f1fdc"),
                            AddressId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CampusName = "Campus 10",
                            CreateDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(469),
                            LastModifiedDate = new DateTime(2023, 10, 30, 10, 24, 53, 9, DateTimeKind.Utc).AddTicks(470)
                        });
                });

            modelBuilder.Entity("DataLayer.Models.House", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LandLordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("PowerPrice")
                        .HasColumnType("real");

                    b.Property<string>("Village")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("WaterPrice")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CampusId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LandLordId");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("DataLayer.Models.HouseImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("HouseId");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("HouseImages");
                });

            modelBuilder.Entity("DataLayer.Models.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Star")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("HouseId");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("DataLayer.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentAmountOfPeople")
                        .HasColumnType("int");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("HouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxAmountOfPeople")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("HouseId");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("DataLayer.Models.RoomHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomHistories");
                });

            modelBuilder.Entity("DataLayer.Models.RoomImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImages");
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.Campuses", b =>
                {
                    b.HasOne("DataLayer.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DataLayer.Models.House", b =>
                {
                    b.HasOne("DataLayer.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Campuses", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataLayer.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("DataLayer.Models.User", "LandLordUser")
                        .WithMany()
                        .HasForeignKey("LandLordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedBy");

                    b.Navigation("Address");

                    b.Navigation("Campus");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LandLordUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DataLayer.Models.HouseImage", b =>
                {
                    b.HasOne("DataLayer.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("DataLayer.Models.House", "House")
                        .WithMany("HouseImages")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("House");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DataLayer.Models.Rate", b =>
                {
                    b.HasOne("DataLayer.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("DataLayer.Models.House", "House")
                        .WithMany("Rates")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("House");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DataLayer.Models.Room", b =>
                {
                    b.HasOne("DataLayer.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("DataLayer.Models.House", "House")
                        .WithMany("Rooms")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("House");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DataLayer.Models.RoomHistory", b =>
                {
                    b.HasOne("DataLayer.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("DataLayer.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedBy");

                    b.HasOne("DataLayer.Models.Room", "Room")
                        .WithMany("RoomHistories")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DataLayer.Models.RoomImage", b =>
                {
                    b.HasOne("DataLayer.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("DataLayer.Models.User", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedBy");

                    b.HasOne("DataLayer.Models.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.HasOne("DataLayer.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Models.House", b =>
                {
                    b.Navigation("HouseImages");

                    b.Navigation("Rates");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("DataLayer.Models.Room", b =>
                {
                    b.Navigation("RoomHistories");

                    b.Navigation("RoomImages");
                });
#pragma warning restore 612, 618
        }
    }
}
